const r="## Adding a summary report endpoint\r\n\r\nYou can add a `?action=report&type=summary` query to `doGet` and compute totals:\r\n\r\n- `totalProducts` — number of product rows\r\n- `totalStockValue` — sum(quantity * costPrice)\r\n- `totalSales` — sum of sales totals\r\n- `totalPurchases` — sum of purchase totals\r\n- `topSellingProducts` — aggregate sales by productId\r\n- `lowStockItems` — products where `quantity <= lowStockThreshold`\r\n\r\n### Example stub (to add into the main code)\r\n\r\n```javascript\r\nfunction generateSummaryReport() {\r\n  // read Products, Sales, Purchases sheets, aggregate values and return report object\r\n}\r\n```\r\n\r\nCall it from `doGet` when `e.parameter.action === 'report'` and `e.parameter.type === 'summary'`.\r\n\r\n---\r\n\r\n\r\n---\r\n\r\n*End of multi-file guide.*\r\n\r\nIf you want, I can now:\r\n\r\n- Export each section as separate `.md` files and provide them in a zip.\r\n- Add an `API key` check to the code.\r\n- Implement the `generateSummaryReport()` function and wire a `/report` query.\r\n\r\nTell me which of the above you'd like next.";export{r as default};
